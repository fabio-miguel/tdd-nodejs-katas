const ITEMS = require("./checkoutKataItems");
const RULES = require("./checkoutKataRules");

class Checkout {
    constructor() {
        this.total = 0;
        this.scannedItems = new Map()
    }
    getTotal() {
        return isNaN(this.total) ? 0 : this.total;
    }
    scan(item) {
        // Check if item exists on ITEMS Map:
        // 1. if true proceed with handeling scan 
        // 2. if false do nothing by returning this.total
        if (ITEMS.has(item)) {
            // You want to keep track of items scanned and their Qty:
            // Why? So rule only applies if itemQty is met for rule
            // 1. this.scannedItems.get(item) is either truthy or falsey
            // i.e. scannedItems Map either has or doesn't have the scanned item
            // 2. if true, add one 
            const itemQty = (this.scannedItems.get(item) || 0) + 1;
            // Set the item scanned and its Qty on the this.scannedItems Map:
            // 1. item is the key name 
            // i.e. "A"
            // 2. itemQty is the variable above which has been updated after scan
            // 3. Map now has new or the same key (unique keys) and new value
            // e.g. {["A", 1]}
            this.scannedItems.set(item, itemQty);

            // Is the item scanned got a rule. If so, it is assigned to const rule
            const rule = RULES.get(item);
            // If rule and itemQty is divisible by the item rule's Qty:
            // 1. discount only applies when this criteria is met
            // 2. hence why it is important to keep track of itemQty
            if (rule && itemQty % rule.quantity === 0) {
                // calculate the discounted price for item to be added to this.total
                // e.g. for item "A": 130 - (2 * 50) = 30
                // for AAA this.total will be 100 + 30 = 130
                this.total += rule.discountedPrice - rule.discount * ITEMS.get(item);
            } else {
                this.total += ITEMS.get(item);
            }
        }
        // Do nothing if the item is not in the ITEMS map
        return this.total;
    }
}


module.exports = { Checkout };